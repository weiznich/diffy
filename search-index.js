var searchIndex = JSON.parse('{\
"diffy":{"doc":"Tools for finding and manipulating differences between files","i":[[3,"ApplyError","diffy","An error returned when [`apply`]ing a `Patch` fails",null,null],[3,"DiffOptions","","A collection of options for modifying the way a diff is…",null,null],[3,"MergeOptions","","A collection of options for modifying the way a merge is…",null,null],[3,"Hunk","","Represents a group of differing lines between two files",null,null],[3,"HunkRange","","The range of lines in a file for a particular `Hunk`.",null,null],[3,"ParsePatchError","","An error returned when parsing a `Patch` using…",null,null],[3,"Patch","","Representation of all the differences between two files",null,null],[3,"PatchFormatter","","Struct used to adjust the formatting of a `Patch`",null,null],[4,"ConflictStyle","","Style used when rendering a conflict",null,null],[13,"Merge","","Renders conflicting lines from both files, separated by…",0,null],[13,"Diff3","","Renders conflicting lines from both files including lines…",0,null],[4,"Line","","A line in either the old file, new file, or both.",null,null],[13,"Context","","A line providing context in the diff which is present in…",1,null],[13,"Delete","","A line deleted from the old file",1,null],[13,"Insert","","A line inserted to the new file",1,null],[5,"apply","","Apply a `Patch` to a base image",null,[[["patch",3]],[["string",3],["applyerror",3],["result",4]]]],[5,"create_patch","","Create a patch between two texts.",null,[[],["patch",3]]],[5,"merge","","Merge two files given a common ancestor.",null,[[],[["string",3],["result",4]]]],[11,"new","","Construct a new `DiffOptions` with default settings",2,[[]]],[11,"set_context_len","","Set the number of context lines that should be used when…",2,[[]]],[11,"create_patch","","Produce a Patch between two texts based on the configured…",2,[[],["patch",3]]],[11,"new","","Constructs a new `MergeOptions` with default settings",3,[[]]],[11,"set_conflict_marker_length","","Set the length of the conflict markers used when…",3,[[]]],[11,"set_conflict_style","","Set the conflict style used when displaying a merge conflict",3,[[["conflictstyle",4]]]],[11,"merge","","Merge two files, given a common ancestor, based on the…",3,[[],[["string",3],["result",4]]]],[11,"new","","Construct a new formatter",4,[[]]],[11,"with_color","","Enable formatting a patch with color",4,[[]]],[11,"fmt_patch","","Returns a `Display` impl which can be used to print a Patch",4,[[["patch",3]]]],[11,"from_str","","Parse a `Patch` from a string",5,[[],[["result",4],["patch",3],["parsepatcherror",3]]]],[11,"original","","Return the name of the old file",5,[[]]],[11,"modified","","Return the name of the new file",5,[[]]],[11,"hunks","","Returns the hunks in the patch",5,[[]]],[11,"old_range","","Returns the corresponding range for the old file in the hunk",6,[[],["hunkrange",3]]],[11,"new_range","","Returns the corresponding range for the new file in the hunk",6,[[],["hunkrange",3]]],[11,"function_context","","Returns the function context (if any) for the hunk",6,[[],["option",4]]],[11,"lines","","Returns the lines in the hunk",6,[[]]],[11,"range","","Returns the range as a `ops::Range`",7,[[],["range",3]]],[11,"start","","Returns the starting line number of the range (inclusive)",7,[[]]],[11,"end","","Returns the ending line number of the range (exclusive)",7,[[]]],[11,"len","","Returns the number of lines in the range",7,[[]]],[11,"is_empty","","Returns `true` if the range is empty (has a length of `0`)",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["conflictstyle",4]]],[11,"clone","","",5,[[],["patch",3]]],[11,"clone","","",6,[[],["hunk",3]]],[11,"clone","","",7,[[],["hunkrange",3]]],[11,"clone","","",1,[[],["line",4]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"eq","","",5,[[["patch",3]]]],[11,"ne","","",5,[[["patch",3]]]],[11,"eq","","",6,[[["hunk",3]]]],[11,"ne","","",6,[[["hunk",3]]]],[11,"eq","","",7,[[["hunkrange",3]]]],[11,"ne","","",7,[[["hunkrange",3]]]],[11,"eq","","",1,[[["line",4]]]],[11,"ne","","",1,[[["line",4]]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]]],"p":[[4,"ConflictStyle"],[4,"Line"],[3,"DiffOptions"],[3,"MergeOptions"],[3,"PatchFormatter"],[3,"Patch"],[3,"Hunk"],[3,"HunkRange"],[3,"ApplyError"],[3,"ParsePatchError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);